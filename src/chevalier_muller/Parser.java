
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Feb 18 21:06:18 CET 2014
//----------------------------------------------------

package chevalier_muller;

import model.Assignement;
import model.DataModel;
import model.DataModels;
import model.DataType;
import model.Instances;
import model.Instanciation;
import model.StructModel;
import model.StructModels;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Feb 18 21:06:18 CET 2014
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\025\000\002\002\005\000\002\002\004\000\002\010" +
    "\002\000\002\010\004\000\002\003\003\000\002\003\003" +
    "\000\002\013\003\000\002\011\002\000\002\011\004\000" +
    "\002\012\005\000\002\006\002\000\002\006\004\000\002" +
    "\007\005\000\002\007\005\000\002\005\006\000\002\004" +
    "\002\000\002\004\004\000\002\015\007\000\002\016\010" +
    "\000\002\016\010\000\002\014\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\051\000\010\006\ufff2\007\ufff2\016\ufff2\001\002\000" +
    "\004\002\053\001\002\000\010\006\uffff\007\007\016\uffff" +
    "\001\002\000\010\006\ufff1\007\ufff1\016\ufff1\001\002\000" +
    "\004\006\014\001\002\000\006\006\014\016\013\001\002" +
    "\000\006\006\ufffe\016\ufffe\001\002\000\004\002\001\001" +
    "\002\000\004\006\014\001\002\000\016\004\ufffb\005\ufffb" +
    "\010\ufffb\011\ufffb\012\ufffb\013\ufffb\001\002\000\006\006" +
    "\ufffd\016\ufffd\001\002\000\006\012\021\013\020\001\002" +
    "\000\006\006\ufffc\016\ufffc\001\002\000\004\006\014\001" +
    "\002\000\004\014\022\001\002\000\004\006\014\001\002" +
    "\000\004\011\024\001\002\000\006\006\ufff0\016\ufff0\001" +
    "\002\000\004\012\026\001\002\000\006\006\014\015\031" +
    "\001\002\000\004\011\036\001\002\000\004\011\035\001" +
    "\002\000\006\006\ufffa\015\ufffa\001\002\000\006\006\033" +
    "\015\034\001\002\000\006\006\ufff9\015\ufff9\001\002\000" +
    "\004\011\ufff8\001\002\000\006\006\uffef\016\uffef\001\002" +
    "\000\006\006\uffee\016\uffee\001\002\000\004\011\040\001" +
    "\002\000\004\002\uffed\001\002\000\010\004\ufff7\005\ufff7" +
    "\010\ufff7\001\002\000\010\004\043\005\045\010\046\001" +
    "\002\000\004\006\014\001\002\000\010\004\ufff6\005\ufff6" +
    "\010\ufff6\001\002\000\004\006\014\001\002\000\010\006" +
    "\ufff3\007\ufff3\016\ufff3\001\002\000\004\011\050\001\002" +
    "\000\010\004\ufff4\005\ufff4\010\ufff4\001\002\000\004\011" +
    "\052\001\002\000\010\004\ufff5\005\ufff5\010\ufff5\001\002" +
    "\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\051\000\006\002\003\004\004\001\001\000\002\001" +
    "\001\000\006\005\005\010\007\001\001\000\002\001\001" +
    "\000\004\013\040\001\001\000\014\003\010\013\015\014" +
    "\011\015\014\016\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\024\001\001\000\002\001\001\000\004\013\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\012\027\013\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\041\001\001\000\004\007\043\001\001\000\004\013" +
    "\050\001\001\000\002\001\001\000\004\013\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP_actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP_actions();
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP_do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer("Error");
		m.append (info.toString());
        m.append(" : "+message);
        System.err.println(m.toString());
    }
   
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }



/** Cup generated class to encapsulate user supplied action code.*/
class CUP_actions {

  /** Constructor */

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP_do_action(
    int                        CUP_act_num,
    java_cup.runtime.lr_parser CUP_parser,
    java.util.Stack            CUP_stack,
    int                        CUP_top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP_result;

      /* select the action based on the action number */
      switch (CUP_act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // print ::= PRINT label TERM 
            {
              String RESULT =null;
		String l = (String)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-1)).value;
		 RESULT = l; 
              CUP_result = getSymbolFactory().newSymbol("print",10, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // assignement ::= label POINT label EQUAL label TERM 
            {
              Assignement RESULT =null;
		String structName = (String)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-5)).value;
		String key = (String)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-3)).value;
		String val = (String)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-1)).value;
		 RESULT = new Assignement(structName, key, val); 
              CUP_result = getSymbolFactory().newSymbol("assignement",12, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // assignement ::= label POINT label EQUAL quotedWords TERM 
            {
              Assignement RESULT =null;
		String structName = (String)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-5)).value;
		String key = (String)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-3)).value;
		String val = (String)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-1)).value;
		 RESULT = new Assignement(structName, key, val); 
              CUP_result = getSymbolFactory().newSymbol("assignement",12, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instanciation ::= label EQUAL NEW label TERM 
            {
              Instanciation RESULT =null;
		String structName = (String)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-4)).value;
		String structModelName = (String)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-1)).value;
		 RESULT = new Instanciation(structName, structModelName); 
              CUP_result = getSymbolFactory().newSymbol("instanciation",11, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // structModels ::= structModels structModel 
            {
              StructModels RESULT =null;
		StructModels sms = (StructModels)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-1)).value;
		StructModel sm = (StructModel)((java_cup.runtime.Symbol) CUP_stack.peek()).value;
		 sms.put(sm); RESULT = sms; 
              CUP_result = getSymbolFactory().newSymbol("structModels",2, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // structModels ::= 
            {
              StructModels RESULT =null;
		 RESULT = new StructModels(); 
              CUP_result = getSymbolFactory().newSymbol("structModels",2, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // structModel ::= STRUCT label dataModels END_STRUCT 
            {
              StructModel RESULT =null;
		String l = (String)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-2)).value;
		DataModels dms = (DataModels)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-1)).value;
		 RESULT = new StructModel(l, dms); 
              CUP_result = getSymbolFactory().newSymbol("structModel",3, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // dataModel ::= PTR label TERM 
            {
              DataModel RESULT =null;
		String l = (String)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-1)).value;
		 RESULT = new DataModel(l, DataType.PTR); 
              CUP_result = getSymbolFactory().newSymbol("dataModel",5, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // dataModel ::= VAR label TERM 
            {
              DataModel RESULT =null;
		String l = (String)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-1)).value;
		 RESULT = new DataModel(l, DataType.VAR); 
              CUP_result = getSymbolFactory().newSymbol("dataModel",5, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // dataModels ::= dataModels dataModel 
            {
              DataModels RESULT =null;
		DataModels dms = (DataModels)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-1)).value;
		DataModel dm = (DataModel)((java_cup.runtime.Symbol) CUP_stack.peek()).value;
		 dms.put(dm); RESULT = dms; 
              CUP_result = getSymbolFactory().newSymbol("dataModels",4, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // dataModels ::= 
            {
              DataModels RESULT =null;
		 RESULT = new DataModels(); 
              CUP_result = getSymbolFactory().newSymbol("dataModels",4, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // quotedWords ::= DOUBLE_QUOTE words DOUBLE_QUOTE 
            {
              String RESULT =null;
		String w = (String)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-1)).value;
		 RESULT = w; 
              CUP_result = getSymbolFactory().newSymbol("quotedWords",8, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // words ::= words TEXT 
            {
              String RESULT =null;
		String w = (String)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-1)).value;
		String t = (String)((java_cup.runtime.Symbol) CUP_stack.peek()).value;
		 RESULT = w + " " + t; 
              CUP_result = getSymbolFactory().newSymbol("words",7, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // words ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP_result = getSymbolFactory().newSymbol("words",7, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // label ::= TEXT 
            {
              String RESULT =null;
		String t = (String)((java_cup.runtime.Symbol) CUP_stack.peek()).value;
		 RESULT = t; 
              CUP_result = getSymbolFactory().newSymbol("label",9, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instance ::= assignement 
            {
              Object RESULT =null;
		Assignement a = (Assignement)((java_cup.runtime.Symbol) CUP_stack.peek()).value;
		 RESULT = a; 
              CUP_result = getSymbolFactory().newSymbol("instance",1, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instance ::= instanciation 
            {
              Object RESULT =null;
		Instanciation s = (Instanciation)((java_cup.runtime.Symbol) CUP_stack.peek()).value;
		 RESULT = s; 
              CUP_result = getSymbolFactory().newSymbol("instance",1, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instances ::= instances instance 
            {
              Instances RESULT =null;
		Instances is = (Instances)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-1)).value;
		Object i = (Object)((java_cup.runtime.Symbol) CUP_stack.peek()).value;
		
												if (i instanceof Assignement) is.assign((Assignement) i);
												if (i instanceof Instanciation) is.instanciate((Instanciation) i);
												RESULT = is;
											
              CUP_result = getSymbolFactory().newSymbol("instances",6, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instances ::= 
            {
              Instances RESULT =null;
		 RESULT = new Instances(); 
              CUP_result = getSymbolFactory().newSymbol("instances",6, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= file EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-1)).value;
		RESULT = start_val;
              CUP_result = getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP_parser.done_parsing();
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // file ::= structModels instances print 
            {
              Object RESULT =null;
		StructModels sms = (StructModels)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-2)).value;
		Instances is = (Instances)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-1)).value;
		String l = (String)((java_cup.runtime.Symbol) CUP_stack.peek()).value;
		 is.setStructModels(sms); System.out.println(is.get(l).toString()); Main.printInstance(is.get(l)); 
              CUP_result = getSymbolFactory().newSymbol("file",0, RESULT);
            }
          return CUP_result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

}
