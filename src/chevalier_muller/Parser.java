
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Feb 18 00:42:18 CET 2014
//----------------------------------------------------

package chevalier_muller;

import model.StructModel;
import model.Struct;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Feb 18 00:42:18 CET 2014
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\016\000\002\007\003\000\002\002\004\000\002\005" +
    "\002\000\002\005\004\000\002\006\005\000\002\003\002" +
    "\000\002\003\004\000\002\004\005\000\002\004\005\000" +
    "\002\002\006\000\002\010\007\000\002\011\010\000\002" +
    "\011\010\000\002\012\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\004\000\004\006\004\001\002\000\004\002\001\001" +
    "\002\000\004\002\006\001\002\000\004\002\000\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\004\000\004\007\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP_actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP_actions();
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP_do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	private StructModel currentStructModel = null;
    
    public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer("Error");
		m.append (info.toString());
        m.append(" : "+message);
        System.err.println(m.toString());
    }
   
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
    
    public StructModel createStructModel(String name) {
    	this.currentStructModel = StructModel.createStructModel(name);
    	return this.currentStructModel;
    }
    
    public StructModel getStructModel() {
    	return this.currentStructModel;
    }



/** Cup generated class to encapsulate user supplied action code.*/
class CUP_actions {

  /** Constructor */

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP_do_action(
    int                        CUP_act_num,
    java_cup.runtime.lr_parser CUP_parser,
    java.util.Stack            CUP_stack,
    int                        CUP_top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP_result;

      /* select the action based on the action number */
      switch (CUP_act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ToString ::= PRINT Label TERM 
            {
              Object RESULT =null;
		String label = (String)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-1)).value;
		 System.out.println(Struct.getStruct(label).toString()); 
              CUP_result = getSymbolFactory().newSymbol("ToString",8, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Assignement ::= Label POINT Label EQUAL Label TERM 
            {
              Object RESULT =null;
		String structName = (String)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-5)).value;
		String key = (String)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-3)).value;
		String val = (String)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-1)).value;
		 Struct.getStruct(structName).put(key, val); 
              CUP_result = getSymbolFactory().newSymbol("Assignement",7, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Assignement ::= Label POINT Label EQUAL QuotedWords TERM 
            {
              Object RESULT =null;
		String structName = (String)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-5)).value;
		String key = (String)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-3)).value;
		String val = (String)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-1)).value;
		 Struct.getStruct(structName).put(key, val); 
              CUP_result = getSymbolFactory().newSymbol("Assignement",7, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Structure ::= Label EQUAL NEW Label TERM 
            {
              Object RESULT =null;
		String structName = (String)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-4)).value;
		String structModelName = (String)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-1)).value;
		 Struct.createStruct(structName, structModelName); 
              CUP_result = getSymbolFactory().newSymbol("Structure",6, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // StructureModel ::= STRUCT Label DataModels END_STRUCT 
            {
              Object RESULT =null;
		String structModelName = (String)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-2)).value;
		 createStructModel(structModelName); 
              CUP_result = getSymbolFactory().newSymbol("StructureModel",0, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DataModel ::= PTR Label TERM 
            {
              Object RESULT =null;
		String label = (String)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-1)).value;
		 getStructModel().putPointer(label); 
              CUP_result = getSymbolFactory().newSymbol("DataModel",2, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DataModel ::= VAR Label TERM 
            {
              Object RESULT =null;
		String label = (String)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-1)).value;
		 getStructModel().putValue(label); 
              CUP_result = getSymbolFactory().newSymbol("DataModel",2, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DataModels ::= DataModels DataModel 
            {
              Object RESULT =null;

              CUP_result = getSymbolFactory().newSymbol("DataModels",1, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DataModels ::= 
            {
              Object RESULT =null;

              CUP_result = getSymbolFactory().newSymbol("DataModels",1, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // QuotedWords ::= DOUBLE_QUOTE Words DOUBLE_QUOTE 
            {
              String RESULT =null;
		String words = (String)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-1)).value;
		 RESULT = words; 
              CUP_result = getSymbolFactory().newSymbol("QuotedWords",4, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Words ::= Words TEXT 
            {
              String RESULT =null;
		String words = (String)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-1)).value;
		String text = (String)((java_cup.runtime.Symbol) CUP_stack.peek()).value;
		 RESULT = words + " " + text; 
              CUP_result = getSymbolFactory().newSymbol("Words",3, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Words ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP_result = getSymbolFactory().newSymbol("Words",3, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Label EOF 
            {
              Object RESULT =null;
		String start_val = (String)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-1)).value;
		RESULT = start_val;
              CUP_result = getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP_parser.done_parsing();
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Label ::= TEXT 
            {
              String RESULT =null;
		String text = (String)((java_cup.runtime.Symbol) CUP_stack.peek()).value;
		 RESULT = text; 
              CUP_result = getSymbolFactory().newSymbol("Label",5, RESULT);
            }
          return CUP_result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

}
