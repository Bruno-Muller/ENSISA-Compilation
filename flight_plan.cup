package chevalier_muller;

import model.DataType;
import model.Struct;

parser code {:
    
    public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer("Error");
		m.append (info.toString());
        m.append(" : "+message);
        System.err.println(m.toString());
    }
   
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

:}

terminal VAR, PTR;
terminal VALUE, NAME;
terminal STRUCT, END_STRUCT;  
terminal TERM;
terminal EQUAL;
terminal POINT;
terminal NEW;
terminal DOUBLE_QUOTE;
terminal PRINT;
   
nonterminal structure_def, data_defs, data_def;
nonterminal structure, assignement;
nonterminal to_string;


data_defs		::=	
				|		data_defs data_def TERM
				;

data_def		::=		VAR NAME:v TERM			{: System.out.println(v); :}
				|		PTR NAME:v TERM			{: System.out.println(v); :}
				;

structure_def	::= 	STRUCT data_defs END_STRUCT TERM;

structure		::= 	NAME:structName EQUAL NEW NAME:structDefinitionName TERM 					{: Struct.createStruct((String) structName, (String) structDefinitionName); :}

assignement		::=		NAME:strct POINT NAME:key EQUAL DOUBLE_QUOTE VALUE:val DOUBLE_QUOTE TERM 	{: Struct.getStruct((String) strct).putValue((String) key, (String) val); :}
				|		NAME:strct POINT NAME:key EQUAL NAME:val TERM 									{: Struct.getStruct((String) strct).putPointer((String) key, (String) val); :}
				;
				
to_string		::= 	PRINT NAME:n TERM	{: System.out.println(Struct.getStruct((String) n).toString()); :};