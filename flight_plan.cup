package chevalier_muller;

import model.StructModel;
import model.Struct;

parser code {:

	private StructModel currentStructModel = null;
    
    public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer("Error");
		m.append (info.toString());
        m.append(" : "+message);
        System.err.println(m.toString());
    }
   
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
    
    public StructModel createStructModel(String name) {
    	this.currentStructModel = StructModel.createStructModel(name);
    	return this.currentStructModel;
    }
    
    public StructModel getStructModel() {
    	return this.currentStructModel;
    }

:}

terminal VAR, PTR;
terminal String TEXT;
terminal STRUCT, END_STRUCT;  
terminal TERM;
terminal EQUAL;
terminal POINT;
terminal NEW;
terminal DOUBLE_QUOTE;
terminal PRINT;
   
nonterminal StructureModel, DataModels, DataModel;
nonterminal String Words, QuotedWords, Label;
nonterminal Structure, Assignement;
nonterminal ToString;

Label			::= 	TEXT:text					{: RESULT = text; :} ;

Words			::= 								{: RESULT = ""; :}
				|		Words:words TEXT:text		{: RESULT = words + " " + text; :}
				;
				
QuotedWords		::=		DOUBLE_QUOTE Words:words DOUBLE_QUOTE	{: RESULT = words; :} ;

DataModels		::=	
				|		DataModels DataModel
				;		

DataModel		::=		VAR Label:label TERM			{: getStructModel().putValue(label); :}
				|		PTR Label:label TERM			{: getStructModel().putPointer(label); :}
				;

StructureModel	::= 	STRUCT Label:structModelName DataModels END_STRUCT			{: createStructModel(structModelName); :};

Structure		::= 	Label:structName EQUAL NEW Label:structModelName TERM		{: Struct.createStruct(structName, structModelName); :};

Assignement		::=		Label:structName POINT Label:key EQUAL QuotedWords:val TERM	{: Struct.getStruct(structName).put(key, val); :}
				|		Label:structName POINT Label:key EQUAL Label:val TERM		{: Struct.getStruct(structName).put(key, val); :}
				;
				
ToString		::= 	PRINT Label:label TERM		{: System.out.println(Struct.getStruct(label).toString()); :};