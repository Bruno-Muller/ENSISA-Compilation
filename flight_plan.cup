package chevalier_muller;

import model.Assignement;
import model.DataModel;
import model.DataModels;
import model.DataType;
import model.Instances;
import model.Instanciation;
import model.StructModel;
import model.StructModels;

parser code {:

    public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer("Error");
		m.append (info.toString());
        m.append(" : "+message);
        System.err.println(m.toString());
    }
   
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

:}

terminal VAR, PTR;
terminal String TEXT;
terminal STRUCT, END_STRUCT;  
terminal TERM;
terminal EQUAL;
terminal POINT;
terminal NEW;
terminal DOUBLE_QUOTE;
terminal PRINT;
   
nonterminal file, instance;
nonterminal StructModels structModels;
nonterminal StructModel structModel;
nonterminal DataModels dataModels;
nonterminal DataModel dataModel;
nonterminal Instances instances;
nonterminal String words, quotedWords, label, print;
nonterminal Instanciation instanciation;
nonterminal Assignement assignement;

file 			::=	structModels:sms instances:is print:l {: is.setStructModels(sms); System.out.println(is.get(l).toString()); Main.printInstance(is.get(l)); :} ;
				
instances		::= 						{: RESULT = new Instances(); :}
				| instances:is instance:i	{:
												if (i instanceof Assignement) is.assign((Assignement) i);
												if (i instanceof Instanciation) is.instanciate((Instanciation) i);
												RESULT = is;
											:}
				;

instance		::= 	instanciation:s	{: RESULT = s; :}
				| 		assignement:a	{: RESULT = a; :}
				;
				
label			::= 	TEXT:t	{: RESULT = t; :} ;

words			::= 					{: RESULT = ""; :}
				|		words:w TEXT:t	{: RESULT = w + " " + t; :}
				;
				
quotedWords		::=		DOUBLE_QUOTE words:w DOUBLE_QUOTE	{: RESULT = w; :} ;

dataModels		::=									{: RESULT = new DataModels(); :}
				|		dataModels:dms dataModel:dm	{: dms.put(dm); RESULT = dms; :}
				;		

dataModel		::=		VAR label:l TERM	{: RESULT = new DataModel(l, DataType.VAR); :}
				|		PTR label:l TERM	{: RESULT = new DataModel(l, DataType.PTR); :}
				;

structModel		::= 	STRUCT label:l dataModels:dms END_STRUCT	{: RESULT = new StructModel(l, dms); :};

structModels 	::= 									{: RESULT = new StructModels(); :}
				| 		structModels:sms structModel:sm	{: sms.put(sm); RESULT = sms; :}
				;

instanciation	::= 	label:structName EQUAL NEW label:structModelName TERM		{: RESULT = new Instanciation(structName, structModelName); :};

assignement		::=		label:structName POINT label:key EQUAL quotedWords:val TERM	{: RESULT = new Assignement(structName, key, val); :}
				|		label:structName POINT label:key EQUAL label:val TERM		{: RESULT = new Assignement(structName, key, val); :}
				;
				
print			::= 	PRINT label:l TERM		{: RESULT = l; :};